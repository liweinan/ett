pac = Package.find(params[:package_id])

type_of_pac = pac.build_type

regular_rpm_type = ["NON_WRAPPER", "REPOLIB_SOURCE", "NATIVE", "JBOSS_AS_WRAPPER", "JBOSSAS_WRAPPER"]
chain_type = ["WRAPPER", "WRAPPER_SOURCE"]
repolib_wrapper_type = ["REPOLIB_WRAPPER"]
mead_only_type = ["MEAD_ONLY"]

# deal with git_url_check ######################################################
git_url_check = false

if mead_only_type.include?(type_of_pac) || chain_type.include?(type_of_pac)
  git_url_check = true
end

if !params.include?(:wrapper_build) && pac.git_url.blank?
  git_url_check = true unless pac.native?
end

git_url_check = false unless pac.git_url.blank?
################################################################################

spec_file_included = params.include?(:edit_spec_file) ? 1 : 0
maven_build_arguments_file_included = params.include?(:edit_maven_build_arguments) ? 1 : 0

source_pkg = pac.name.sub(/-eap[0-9]+/, '')
warning_string = "This will also build the source '#{source_pkg}' package. " \
                 "If you only want to build the '#{pac.name}' wrapper of it " \
                 "please select CANCEL and make sure you check the Wrapper " \
                 "only option before requesting again"
warning_chain = "This will build both the MEAD and WRAPPER part of the package. " \
                "If you only want to build the WRAPPER part, please select CANCEL " \
                "and make sure you check the Wrapper only option before requesting again"

warning_not_assignee = "You are not the assignee of this package. You are recommended, " \
                       "but not required to assign this package to you by pressing 'Cancel' and using the " \
                       "'Assign To Me' button. If you'd like to continue nonetheless, " \
                       "press the 'OK' button."

git_url_not_provided = "You do not have the source-url specified in ETT. You need " \
  "to specify it for this type of build."

begin
  type_build = 'chain'
  type_build = 'wrapper' if params.include?(:wrapper_build)

  is_wrapper_wrapper_pac = false

  if repolib_wrapper_type.include?(type_of_pac)
    is_wrapper_wrapper_pac = true
  end

  is_mead_only_build = mead_only_type.include?(type_of_pac)

  page << "var submit = true;"
  page << "var x = '#{type_build}';"
  page << "var is_wrapper_wrapper_pac = #{is_wrapper_wrapper_pac};"
  page << "var is_mead_only_build = #{is_mead_only_build};"
  page << "var clentry = '#{params['clentry']['text'].inspect[1..-2].gsub(/'/, "\\\\'")}';"
  page << "var move_fwd = true;"
  page << "if (move_fwd && \"#{git_url_check.to_s}\" == \"true\") {"
  page << "    alert(\"#{git_url_not_provided}\");"
  page << "     move_fwd = false;"
  page << "     TINY.box.hide()"
  page << "}"
  page << "if ( move_fwd && x == 'chain' && is_wrapper_wrapper_pac) {"
  page << "  move_fwd = confirm(\"#{warning_string}\");"
  page << "} else if (move_fwd && x == 'chain' && !is_mead_only_build ) {"
  page << "  move_fwd = confirm(\"#{warning_chain}\");"
  page << "}"
  page << "if (move_fwd && #{current_user != pac.assignee}) {"
  page << "  move_fwd = confirm(\"#{warning_not_assignee}\");"
  page << "}"
  page << "if (move_fwd) {"
  page << "  new Ajax.Request('/toolbox/submit_build/' + #{params[:package_id]}, {"
  page << "    method: 'POST',"
  page << "    asynchronous: true,"
  page << "    evalScripts: true,"
  page << "    parameters: {"
  page << "      'type_build': x,"
  page << "      'authenticity_token': '#{form_authenticity_token}',"
  page << "      'clentry': clentry,"
  page << "      'edit_spec_file': #{spec_file_included},"
  page << "      'edit_maven_build_arguments': #{maven_build_arguments_file_included},"
  page << "    }"
  page << "  })"
  page << "}"
rescue TypeError => e
  page.alert(e.message)
end
