<%= render :partial => 'packages/common_js' %>

<script type="text/javascript">
    // After page loaded, do some initial scannings and process package's bz bugs according to https://docspace.corp.redhat.com/docs/DOC-148169.
    <% if has_bz_auth_info? && @package.task.can_use_bz_integration? %>
    document.observe("dom:loaded", function () {

        setTimeout(update_bz_bugs, 5000);
     });
    <% end %>

    function update_bz_bugs() {
        var bz_bug_actions = document.getObjectsByRegex(/^col_bz_action_(\d)+(.+)/);

        for (var i = 0; i < bz_bug_actions.length; i++) {
            var vals = bz_bug_actions[i].id.split(':');
            var bz_bug_id = vals[0].replace("col_bz_action_", "");
            var action = vals[1];

            if (action == '<%=BzBug::BZ_ACTIONS[:accepted]%>') {
                // user has provided bz account and password info in package edit page, and the bz update request
                // has been submitted to BZ asynchrously.
                // Now it's time to sync bug info automatically to see if the bz request has been done.
                moveBzBugStatusToDone(bz_bug_id);
                syncBugInfoWithBz([bz_bug_id]);
            }
        }
    }
    function moveBzBugStatusToDone(bz_bug_id) {
        new Ajax.Request('/bz_bugs/' + bz_bug_id,
                {
                    method: 'POST',
                    asynchronous: true,
                    evalScripts: true,
                    onLoading: function () {
                        // Element.show('update_bz_bugs_indicator');
                    },
                    onFailure: function () {
                        // Element.hide('update_bz_bugs_indicator');
                    },
                    onSuccess: function () {
                        // Element.hide('update_bz_bugs_indicator');
                    },
                    onComplete: function() {
                    },
                    parameters: {
                        'bz_action': '<%=BzBug::BZ_ACTIONS[:done]%>',
                        'authenticity_token': '<%=form_authenticity_token%>',
                        '_method': 'put'
                    }
                }
        );
    }

    // Dustin, please use the bz_bugs/update properly to call necessary BZ and MEAD apis according to the requirement in https://docspace.corp.redhat.com/docs/DOC-148169
    // Check '==> Finished' section in the doc
    function moveBzBugStatusToModified(bz_bug_id) {
        new Ajax.Request('/bz_bugs/' + bz_bug_id,
                {
                    method: 'POST',
                    asynchronous: true,
                    evalScripts: true,
                    onLoading: function () {
                        // Element.show('update_bz_bugs_indicator');
                    },
                    onFailure: function () {
                        // Element.hide('update_bz_bugs_indicator');
                    },
                    onSuccess: function () {
                        // Element.hide('update_bz_bugs_indicator');
                    },
                    parameters: {
                        'bz_action': '<%=BzBug::BZ_ACTIONS[:movetomodified]%>',
                        'authenticity_token': '<%=form_authenticity_token%>',
                        '_method': 'put'
                    }
                }
        );
    }

    function syncAllBugInfoWithBz() {
        var bz_bugs = document.getElementsByRegex('^col_bz_id_.+');
        syncBugInfoWithBz(bz_bugs);
    }

    function syncBugInfoWithBz(bz_bugs) {
        if (bz_bugs.length == 0) {
            // Element.hide('sync_bz_bug_button_indicator');
            var sbb = document.getElementById('sync_bz_bug_form_div');
            sbb.innerHTML = "Done!";
            return;
        }

        bz_bug = bz_bugs.pop();
        var sbb_user = '';
        if (document.getElementById('sbb_user')) {
            sbb_user = document.getElementById('sbb_user').value;
        }

        var sbb_pwd = '';
        if (document.getElementById('sbb_pwd')) {
            sbb_pwd = document.getElementById('sbb_pwd').value;
        }

        var bz_id = bz_bug.match(/\d+/)[0]
        new Ajax.Request('/bz_bugs/sync/' + bz_id,
                {
                    method: 'GET',
                    asynchronous: true,
                    evalScripts: true,
                    onLoading: function () {
                        Element.show("sync_bz_bug_button_indicator");
                    },
                    onFailure: function () {
                        Element.hide('sync_bz_bug_button_indicator');
                        syncBugInfoWithBz(bz_bugs);
                    },
                    onSuccess: function (response) {
                        syncBugInfoWithBz(bz_bugs);
                    },
                    parameters: {
                        'user': sbb_user,
                        'pwd': sbb_pwd,
                        'authenticity_token': '<%=form_authenticity_token%>'
                    }
                }
        );
    }

    function createBzBug() {
//        var nbb_rel = document.getElementById('nbb_rel').value;
//        var nbb_tver = document.getElementById('nbb_tver').value;
        var nbb_ver = document.getElementById('nbb_ver').value;

        if (!checkPackageVersionFormat(nbb_ver)) {
            return false;
        }


//        var nbb_sum = document.getElementById('nbb_sum').value;
        var nbb_user = document.getElementById('nbb_user').value;
        var nbb_pwd = document.getElementById('nbb_pwd').value;
        var nbb_see_also = document.getElementById('nbb_see_also').value;

        new Ajax.Request('/bz_bugs',
                {
                    method: 'POST',
                    asynchronous: true,
                    evalScripts: true,
                    onLoading: function () {
                        Element.show('create_bz_bug_indicator');
                    },
                    onSuccess: function () {
                        var div = document.getElementById('new_bz_bug_form_div');
                        Element.hide(div);
                        div.innerHTML = "";
                    },
                    onFailure: function () {
                        Element.hide('create_bz_bug_indicator');
                    },
                    parameters: {
                        'package_id': '<%=package.id%>',
                        'type': 'create_bz',
//                        'rel': nbb_rel,
//                        'tver': nbb_tver,
                        'ver': nbb_ver,
//                        'sum' : nbb_sum,
                        'user': nbb_user,
                        'pwd': nbb_pwd,
                        'see_also': nbb_see_also,
                        'authenticity_token': '<%=form_authenticity_token%>'
                    }
                });
    }

    function createBzBugLink() {
        var user = document.getElementById('lbb_user').value;
        var pwd = document.getElementById('lbb_pwd').value;
        var bz_id = document.getElementById('lbb_bz_id').value;

        bz_id = bz_id.replace(/^\s+|\s+$/g, '');
        new Ajax.Request('/bz_bugs',
                {
                    method: 'POST',
                    asynchronous: true,
                    evalScripts: true,
                    onLoading: function () {
                        Element.show('link_bz_bug_indicator');
                    },
                    onSuccess: function () {
                        var div = document.getElementById('link_bz_bug_form_div');
                        Element.hide(div);
                        div.innerHTML = '';
                    },
                    onFailure: function () {
                        Element.hide('link_bz_bug_indicator');
                    },

                    parameters: {
                        'bz_id': bz_id,
                        'type': 'create_bz_link',
                        'user': user,
                        'pwd': pwd,
                        'package_id': '<%=package.id%>',
                        'authenticity_token': '<%=form_authenticity_token%>'}
                });
    }

    function renderBzBugLinkEditor(id) {
        renderPartial(id, id, 'bz_bugs/edit');
    }

    function renderPartial(id, div_id, partial, package_id) {
        package_id = typeof package_id !== 'undefined' ? package_id : 0;
        var indicator = document.getElementById(div_id + '_indicator');

        new Ajax.Request('/bz_bugs/render_partial/' + id, {
            method: 'GET',
            asynchronous: true,
            evalScripts: true,
            onLoading: function () {
                if (indicator) {
                    Element.show(indicator);
                }
            },
            onSuccess: function (response) {
                if (indicator) {
                    Element.hide(indicator);
                }
                var content = response.responseText;
                var div = document.getElementById(div_id);
                div.innerHTML = content;
                Element.show(div);
                Element.highlight(div);
            },
            parameters: {
                "id": id,
                'partial': partial,
                'package_id': package_id
            }
        });
    }

    function renderBzBugForm(formType) {
        renderPartial(formType, formType + "_form_div", formType, '<%=package.id%>');
    }

    function hideBzBugForm(formType) {
        Element.hide(formType + '_form_div');
    }

    function updateBzBugLink(id, bz_id) {
        new Ajax.Request('/bz_bugs/' + id,
                {
                    method: 'POST',
                    asynchronous: true,
                    evalScripts: true,
                    onLoading: function () {
                        Element.show("bz_id_" + id + "_indicator");
                    },
                    onSuccess: function () {
                        Element.hide("bz_id_" + id + "_indicator");
                        var div = 'col_bz_id_' + id;
                        renderBzBugId(id, document.getElementById(div));
                        Element.highlight(div);
                    },
                    parameters: {
                        '_method': 'put',
                        'bz_id': bz_id,
                        'authenticity_token': '<%=form_authenticity_token%>'
                    }
                });
    }

    function updateBzBugRow(id) {

        var colOps = document.getElementById('col_bz_ops_' + id);
        // alert("colOps: " + colOps);    
        renderOps(id, colOps);

        var colBzBugId = document.getElementById('col_bz_id_' + id);
        // alert("colBzBugId: " + colBzBugId);
        renderBzBugId(id, colBzBugId);

        var colBzBugCreator = document.getElementById('col_bz_creator_' + id);
        // alert("colBzBugCreator: " + colBzBugCreator);
        renderBzBugCreator(id, colBzBugCreator);

        var colBzLastSyncedAt = document.getElementById('col_bz_last_synced_at_' + id);
        // alert("colBzLastSyncedAt: " + colBzLastSyncedAt);
        renderBzBugLastSyncedAt(id, colBzLastSyncedAt);

        var colBzBugStatus = document.getElementById('col_bz_status_' + id);
        // alert("colBzBugStatus: " + colBzBugStatus);
        renderBzBugStatus(id, colBzBugStatus);

        var colBzBugSummary = document.getElementById('col_bz_summary_' + id);
        // alert("colBzBugSummary: " + colBzBugSummary);
        renderBzBugSummary(id, colBzBugSummary);

        // var row = document.getElementById('bz_list_row_' + id);
        // alert('row: ' + row);
        // Element.highlight(row);
    }

    function addBzBugRow(id) {
        var tbl = document.getElementById('bz_list_tbl');
        var rowCnt = tbl.rows.length;
        var row = tbl.insertRow(rowCnt);
        row.id = 'bz_list_row_' + id;

        var colOps = row.insertCell(0);
        colOps.id = 'col_bz_ops_' + id;
        renderOps(id, colOps);

        var colBzBugId = row.insertCell(1);
        colBzBugId.id = 'col_bz_id_' + id;
        renderBzBugId(id, colBzBugId);

        var colBzBugCreator = row.insertCell(2);
        colBzBugCreator.id = 'col_bz_creator_' + id;
        renderBzBugCreator(id, colBzBugCreator);

        var colBzLastSyncedAt = row.insertCell(3);
        colBzLastSyncedAt.id = 'col_bz_last_synced_at_' + id;
        renderBzBugLastSyncedAt(id, colBzLastSyncedAt);

        var colBzBugStatus = row.insertCell(4);
        colBzBugStatus.id = 'col_bz_status_' + id;
        renderBzBugStatus(id, colBzBugStatus);

        var colBzBugSummary = row.insertCell(5);
        colBzBugSummary.id = 'col_bz_summary_' + id;
        renderBzBugSummary(id, colBzBugSummary);

        Element.highlight(row);
    }

    function renderBzBugId(id, col) {
        col.className = 'small_font';
        renderPartial(id, col.id, 'bz_bugs/bz_id');
    }

    function renderOps(id, col) {
        col.className = 'small_font';
        renderPartial(id, col.id, 'bz_bugs/ops');
    }

    function renderBzBugCreator(id, col) {
        col.className = 'small_font';
        renderPartial(id, col.id, 'bz_bugs/creator');
    }

    function renderBzBugLastSyncedAt(id, col) {
        col.className = 'small_font';
        renderPartial(id, col.id, 'bz_bugs/last_synced_at');
    }

    function renderBzBugStatus(id, col) {
        col.className = 'small_font';
        renderPartial(id, col.id, 'bz_bugs/bz_status');
    }

    function renderBzBugSummary(id, col) {
        col.className = 'small_font';
        renderPartial(id, col.id, 'bz_bugs/summary');
    }

    function deleteRow(rowid) {
        var row = document.getElementById(rowid);
        var table = row.parentNode;
        while (table && table.tagName != 'TABLE')
            table = table.parentNode;
        if (!table)
            return;
        table.deleteRow(row.rowIndex);
    }

    function deleteBzBugRow(id) {
        deleteRow('bz_list_row_' + id);
    }

    function deleteBzBugLink(id, bz_bug_id) {
        var confirm = window.confirm("Are you sure to remove link to bz" + bz_bug_id + "?");
        if (confirm == true) {
            new Ajax.Request('/bz_bugs/' + id,
                    {
                        method: 'POST',
                        asynchronous: true,
                        evalScripts: true,
                        onLoading: function () {
                        },
                        onSuccess: function () {
                            deleteBzBugRow(id);
                        },
                        parameters: {
                            '_method': 'delete',
                            'authenticity_token': '<%=form_authenticity_token%>'}
                    });
        }
    }
</script>
