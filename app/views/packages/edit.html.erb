<%
   unless @user.blank?
     params[:user] = @user
   end
%>

<h2><%= h @package.name %></h2>

<%= render :partial => 'layouts/error_messages' %>
<% form_for(@package, :html => {:onsubmit => 'return false;'}) do |f| %>
    <%= f.error_messages %>
    <% if params[:user] %>
        <input type="hidden" id="user" name="user" value="<%= params[:user] %>"/>
    <% end %>

    <div class='manage-tbl'>
      <table style='width: 100%;'>
        <%= render :partial => 'packages/fields/name', :locals => {:f => f} %>
        <%= render :partial => 'packages/fields/task', :locals => {:f => f} %>
        <%= render :partial => 'packages/fields/status', :locals => {:f => f} %>

        <% if @package.task.use_bz_integration? %>
            <%= render :partial => 'bz_bugs/fields/bz_user' %>
            <%= render :partial => 'bz_bugs/fields/bz_pass' %>
        <% end %>

        <%= render :partial => 'packages/fields/tags', :locals => {:f => f} %>
        <%= render :partial => 'packages/fields/ver', :locals => {:f => f} %>
        <%= render :partial => 'packages/fields/git_url', :locals => {:f => f} %>

        <% if @package.task.use_mead_integration? %>
            <%= render :partial => 'packages/fields/brew', :locals => {:f => f} %>
            <%= render :partial => 'packages/fields/mead', :locals => {:f => f} %>
        <% end %>
        <%= render :partial => 'packages/fields/github_pr', :locals => {:f => f} %>
        <%= render :partial => 'packages/fields/erratum', :locals => {:f => f} %>

        <%= render :partial => 'packages/fields/assignee', :locals => {:f => f} %>
        <%= render :partial => 'packages/fields/notes', :locals => {:f => f} %>

        <tr>
          <td colspan=2 style="text-align:left;">
            <%= render :partial => 'layouts/notification',
                       :locals => {:title => 'Notify the changes to:',
                                   :div_id => 'package_edit'} %>

        <input type='submit'
               value='Update'
               <% if @package.task.use_bz_integration? %>
                  onclick="validateFormAndPostForm();return false;"
               <% else %>
                  onclick="submit(); return false;"
                <% end %>/>

            <%= render :partial => 'layouts/progress_indicator',
                       :locals => {:progress_indicator_id => 'validate_bz_auth_indicator',
                                   :msg => t('validating_bzauth_info')} %>

            <%= render :partial => 'layouts/notification_link',
                       :locals => {:div_id => 'package_edit'} %>
          </td>
        </tr>
      </table>
    </div>
<% end %>

<%= render :partial => 'packages/time_tracking_js' %>

<% content_for :js do %>
    <script type="text/javascript">
        function validateFormAndPostForm() {
            var ver = document.getElementById('package_ver').value;
            var status = document.getElementById('package_status_id').value;
            var github_pr = document.getElementById('package_github_pr').value;

            // default is always the second option
            var defaultSelected = document.getElementById('package_status_id').options[1].selected;

            var notes = document.getElementById('package_notes');
            if (status == '85' && !defaultSelected) {
                var changelog_res = prompt('Please enter reason why this package is blocked');
                if (changelog_res != null) {
                    var changelog = '* Blocked @ ' + new Date().toDateString();
                    changelog += '\n- Reason: ' + changelog_res;
                    notes.value = changelog + '\n\n' + notes.value;
                }
            } else if (status == '84' && !defaultSelected) {
                var changelog_res = prompt('Please enter reason why this package needs to be fixed');
                if (changelog_res != null) {
                    var changelog = '* Need to be fixed @ ' + new Date().toDateString();
                    changelog += '\n- Reason: ' + changelog_res;
                    notes.value = changelog + '\n\n' + notes.value;
                }
            } else if (ver != "") {
                if (!checkPackageVersionFormat(ver)) {
                    alert('<%=t"version_fmt_incorrect"%>');
                    return false;
                }
            } else if (status == '36') { // finished state and ver is empty
                alert('You have to specify a version');
                return false;
            }

            // check that github_pr is filled
            if (status == '36' && github_pr == "") {

                var tags= document.getElementsByClassName("tags_in_package");
                var is_not_shipped = false;

                for (var i = 0; i < tags.length; i++) {
                    var tag = tags[i];
                    if (tag.value == 'Not Shipped' && tag.checked == true) {
                        is_not_shipped = true;
                        break;
                    }
                }

                if (!is_not_shipped) {
                    var continue_process = confirm("Proceed without specifying a PR?");
                    if (continue_process == false) {
                        return false;
                    }
                }
            }

            var myForm = document.getElementById('edit_package_<%=@package.id%>');
            var bzauth_user = document.getElementById('bzauth_user');
            var bzauth_pwd = document.getElementById('bzauth_pwd');
            checkBzAuthInfoWithCallback(bzauth_user, bzauth_pwd, validate_bz_auth_indicator, function() {myForm.submit();});
        }
    </script>
<% end %>
